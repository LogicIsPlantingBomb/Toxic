import React, { useState } from "react";
import { motion } from "framer-motion";
import { Link, useNavigate } from "react-router-dom";

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

const Register = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: ""
  });
  const [message, setMessage] = useState("");
  const [isError, setIsError] = useState(false);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage("");
    setIsError(false);

    try {
      const response = await fetch(`${API_URL}/api/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          username: formData.username,
          email: formData.email,
          password: formData.password,
        }),
        credentials: 'include',
      });

      const data = await response.json();

      if (!response.ok) {
        setIsError(true);
        if (data.errors) {
          setMessage(data.errors[0].msg);
        } else {
          setMessage(data.message || "Error registering user");
        }
        return;
      }

      setMessage("Registration successful! Entering the arena...");
      if (data.token) {
        localStorage.setItem('token', data.token);
      }
      
      setTimeout(() => {
        navigate('/login');
      }, 2000);

    } catch (error) {
      setIsError(true);
      setMessage("Network error. Please try again.");
      console.error("Registration error:", error);
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1
    }
  };

  return (
    <div className="relative min-h-screen flex items-center justify-center overflow-hidden bg-gray-900 bg-[url('https://images.unsplash.com/photo-1518640467707-6811f4a6ab73?q=80&w=1000')] bg-blend-overlay bg-cover">
      <motion.div
        initial="hidden"
        animate="visible"
        variants={containerVariants}
        className="relative w-96 p-8 bg-gray-900/90 backdrop-blur-sm rounded-sm shadow-xl border-2 border-gray-700"
      >
        <div className="absolute -top-3 -left-3 w-6 h-6 border-t-2 border-l-2 border-red-600"></div>
        <div className="absolute -top-3 -right-3 w-6 h-6 border-t-2 border-r-2 border-red-600"></div>
        <div className="absolute -bottom-3 -left-3 w-6 h-6 border-b-2 border-l-2 border-red-600"></div>
        <div className="absolute -bottom-3 -right-3 w-6 h-6 border-b-2 border-r-2 border-red-600"></div>

        <motion.h2
          variants={itemVariants}
          className="text-3xl font-bold mb-6 text-center text-red-500 font-military tracking-wide uppercase"
          style={{ textShadow: '0 0 8px rgba(239, 68, 68, 0.7)' }}
        >
          Enter The Arena
        </motion.h2>

        {message && (
          <motion.p
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className={`text-center mb-4 font-bold ${
              isError ? "text-red-500" : "text-red-400"
            }`}
          >
            {message}
          </motion.p>
        )}

        <motion.form
          variants={containerVariants}
          onSubmit={handleSubmit}
          className="space-y-4"
        >
          <motion.div variants={itemVariants}>
            <input
              type="text"
              name="username"
              placeholder="FIGHTER NAME"
              className="w-full p-3 bg-gray-800 border-2 border-gray-700 rounded-none text-gray-100 placeholder-gray-500 focus:outline-none focus:border-red-600 focus:ring-0 uppercase font-bold tracking-wider"
              value={formData.username}
              onChange={handleChange}
              required
            />
          </motion.div>

          <motion.div variants={itemVariants}>
            <input
              type="email"
              name="email"
              placeholder="WAR CORRESPONDENCE"
              className="w-full p-3 bg-gray-800 border-2 border-gray-700 rounded-none text-gray-100 placeholder-gray-500 focus:outline-none focus:border-red-600 focus:ring-0 uppercase font-bold tracking-wider"
              value={formData.email}
              onChange={handleChange}
              required
            />
          </motion.div>

          <motion.div variants={itemVariants}>
            <input
              type="password"
              name="password"
              placeholder="SECRET CODE"
              className="w-full p-3 bg-gray-800 border-2 border-gray-700 rounded-none text-gray-100 placeholder-gray-500 focus:outline-none focus:border-red-600 focus:ring-0 uppercase font-bold tracking-wider"
              value={formData.password}
              onChange={handleChange}
              required
            />
          </motion.div>

          <motion.button
            variants={itemVariants}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            type="submit"
            className="w-full bg-gray-800 text-white p-3 rounded-none border-2 border-red-600 hover:bg-red-600/20 font-bold uppercase tracking-wider transition-all duration-300"
          >
            Enlist Now
          </motion.button>

          <motion.div
            variants={itemVariants}
            className="text-center mt-6 text-gray-400 font-bold"
          >
            Already enlisted?{" "}
            <Link 
              to="/login" 
              className="text-red-500 hover:text-red-400 transition-colors"
            >
              REPORT FOR DUTY
            </Link>
          </motion.div>
        </motion.form>

        <motion.div 
          variants={itemVariants}
          className="mt-6 text-center text-xs text-gray-500 font-mono"
        >
          <p>WARNING: This is a no-holds-barred opinion arena.</p>
          <p>Weak takes will be eliminated.</p>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default Register;
